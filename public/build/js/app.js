!function(){"use strict";angular.module("contactsApp",["ui.bootstrap"])}(),function(){"use strict";angular.module("contactsApp").controller("ContactsController",["$http","ContactsService",function(t,e){var n=this;n.contacts=[],n.firstName="",n.lastName="",n.email="",n.phone="",n.displayContacts=function(){t.get("get-contacts").then(function(t){n.contacts=t.data,_.each(n.contacts,function(t){t.intrash=!!+t.intrash}),e.contacts=n.contacts},function(t){alert("There was an error retrieving contacts.")})},n.displayContacts(),n.addContact=function(){t.post("save-contact",{first_name:n.firstName,last_name:n.lastName,email:n.email,phone:n.phone}).then(function(t){n.displayContacts(),n.firstName="",n.lastName="",n.email="",n.phone=""},function(t){alert.log("There was an error saving the contact.",t)})},n.toggleContactInTrash=function(e){e.intrash=!e.intrash,t.post("soft-delete",{id:e.id}).then(function(t){},function(t){alert("There was an error storing the 'intrash' state of "+e.first_name),console.log(t)})}}])}(),function(){"use strict";angular.module("contactsApp").service("ContactsService",["$http",function(t){var e=this;e.contacts=[],e["delete"]=function(e){t.post("delete-contacts",{}).then(function(t){console.log("Selected contacts successfully deleted"),console.log(t)},function(t){alert("There was an error deleting the selected contacts")})}}])}(),function(){"use strict";angular.module("contactsApp").controller("TrashModalController",["ContactsService","$http",function(t,e){var n=this;n.toggleSelectAll=function(){_.each(t.contacts,function(t){t.selected=!t.selected})},n.deleteSelected=function(){console.log("delete selected called");var e=[];_.each(t.contacts,function(t){t.selected&&(console.log("permanently deleting "+t.first_name+" "+t.last_name),e.push(t))}),e.length>0&&(t["delete"](e),_.each(e,function(t){t.intrash=!1}))}}])}(),function(){"use strict"}();
//# sourceMappingURL=data:application/json;base64,
