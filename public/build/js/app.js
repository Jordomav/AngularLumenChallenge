!function(){"use strict";angular.module("contactsApp",[])}(),function(){"use strict";angular.module("contactsApp").controller("ContactsController",["$http","ContactsService",function(t,n){var e=this;e.contacts=[],e.contactLists=[],e.firstNameInput="",e.lastNameInput="",e.emailInput="",e.phoneInput="",e.belongsToListIds=[],e.displayContacts=function(){var t=n.getContacts();t.then(function(t){e.contacts=t.data,_.each(e.contacts,function(t){t.intrash=!!+t.intrash})},function(t){alert("There was an error retrieving Contacts"),console.log(t)})},e.displayContacts(),e.addContact=function(){var t=e.newContactData(),o=n.save(t);o.then(function(t){e.displayContacts(),e.resetForm()},function(t){alert("There was a problem saving the Contact"),console.log(t)})},e.toggleContactInTrash=function(n){n.intrash=!n.intrash,t.post("soft-delete",{id:n.id}).then(function(t){},function(t){alert("There was an error storing the 'intrash' state of "+n.first_name)})},e.newContactData=function(){return{first_name:e.firstNameInput,last_name:e.lastNameInput,email:e.emailInput,phone:e.phoneInput,lists:e.belongsToListIds}},e.resetForm=function(){e.firstNameInput="",e.lastNameInput="",e.emailInput="",e.phoneInput="",e.listsForNewContact=[]},t.get("get-contact-lists").then(function(t){e.contactLists=t.data},function(){alert("There was an error retrieving Contact Lists")})}])}(),function(){"use strict";angular.module("contactsApp").service("ContactsService",["$http",function(t){var n=this;n.contacts=[],n.getContacts=function(){return t.get("get-contacts")},n.save=function(n){return t.post("save-contact",n)},n["delete"]=function(n){t.post("delete-contacts",{}).then(function(t){},function(){alert("There was an error deleting the selected contacts")})}}])}(),function(){"use strict";angular.module("contactsApp").controller("TrashModalController",["ContactsService","$http",function(t,n){var e=this;e.deleteContacts=function(){console.log("delete selected called"),t.contacts.length>0&&(t["delete"](t.contacts),_.each(t.contacts,function(t){t.intrash&&(t.deleted=!0,t.intrash=!1)}))}}])}(),function(){"use strict";angular.module("contactsApp").controller("ContactListsController",["$http",function(t){}])}();
//# sourceMappingURL=data:application/json;base64,
