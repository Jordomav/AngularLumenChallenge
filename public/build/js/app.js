!function(){"use strict";angular.module("contactsApp",["ui.bootstrap"])}(),function(){"use strict";angular.module("contactsApp").controller("ContactsController",["$http","ContactsService",function(t,n){var a=this;a.contacts=[],a.firstName="",a.lastName="",a.email="",a.phone="",a.displayContacts=function(){t.get("get-contacts").then(function(t){a.contacts=t.data,_.each(a.contacts,function(t){t.intrash=!!+t.intrash,n.contacts.push(t)})},function(t){alert("There was an error retrieving contacts.")})},a.displayContacts(),a.addContact=function(){t.post("save-contact",{first_name:a.firstName,last_name:a.lastName,email:a.email,phone:a.phone}).then(function(t){a.displayContacts(),a.firstName="",a.lastName="",a.email="",a.phone=""},function(t){alert.log("There was an error saving the contact.",t)})},a.toggleContactInTrash=function(n){n.intrash=!n.intrash,t.post("soft-delete",{id:n.id}).then(function(t){},function(t){alert("There was an error storing the 'intrash' state of "+n.first_name),console.log(t)})}}])}(),function(){"use strict";angular.module("contactsApp").service("ContactsService",function(){var t=this;t.contacts=[]})}(),function(){"use strict";angular.module("contactsApp").controller("TrashModalController",["ContactsService","$http",function(t,n){var a=this;a.toggleSelectAll=function(){_.each(t.contacts,function(t){t.selected=!t.selected})}}])}(),function(){"use strict"}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRhY3RzYXBwLm1vZHVsZS5qcyIsImNvbnRhY3RzL2NvbnRhY3RzLmNvbnRyb2xsZXIuanMiLCJjb250YWN0cy9jb250YWN0cy5zZXJ2aWNlLmpzIiwiY29udGFjdHMvdHJhc2htb2RhbC5jb250cm9sbGVyLmpzIiwiY29udGFjdF9saXN0cy9jb250YWN0Lmxpc3RzLmNvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkaHR0cCIsIkNvbnRhY3RzU2VydmljZSIsInZtIiwidGhpcyIsImNvbnRhY3RzIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJlbWFpbCIsInBob25lIiwiZGlzcGxheUNvbnRhY3RzIiwiZ2V0IiwidGhlbiIsInJlcyIsImRhdGEiLCJfIiwiZWFjaCIsImNvbnRhY3QiLCJpbnRyYXNoIiwicHVzaCIsImFsZXJ0IiwiYWRkQ29udGFjdCIsInBvc3QiLCJmaXJzdF9uYW1lIiwibGFzdF9uYW1lIiwibG9nIiwidG9nZ2xlQ29udGFjdEluVHJhc2giLCJpZCIsImNvbnNvbGUiLCJzZXJ2aWNlIiwidG9nZ2xlU2VsZWN0QWxsIiwic2VsZWN0ZWQiXSwibWFwcGluZ3MiOiJDQUlBLFdBRUEsWUFFQUEsU0FBQUMsT0FBQSxlQUFBLG9CQ0pBLFdBRUEsWUFFQUQsU0FBQUMsT0FBQSxlQUNBQyxXQUFBLHNCQUFBLFFBQUEsa0JBQUEsU0FBQUMsRUFBQUMsR0FFQSxHQUFBQyxHQUFBQyxJQUdBRCxHQUFBRSxZQUdBRixFQUFBRyxVQUFBLEdBQ0FILEVBQUFJLFNBQUEsR0FDQUosRUFBQUssTUFBQSxHQUNBTCxFQUFBTSxNQUFBLEdBRUFOLEVBQUFPLGdCQUFBLFdBRUFULEVBQUFVLElBQUEsZ0JBQ0FDLEtBQUEsU0FBQUMsR0FFQVYsRUFBQUUsU0FBQVEsRUFBQUMsS0FHQUMsRUFBQUMsS0FBQWIsRUFBQUUsU0FBQSxTQUFBWSxHQUNBQSxFQUFBQyxXQUFBRCxFQUFBQyxRQUVBaEIsRUFBQUcsU0FBQWMsS0FBQUYsTUFHQSxTQUFBSixHQUNBTyxNQUFBLDhDQUtBakIsRUFBQU8sa0JBSUFQLEVBQUFrQixXQUFBLFdBRUFwQixFQUFBcUIsS0FBQSxnQkFFQUMsV0FBQXBCLEVBQUFHLFVBQ0FrQixVQUFBckIsRUFBQUksU0FDQUMsTUFBQUwsRUFBQUssTUFDQUMsTUFBQU4sRUFBQU0sUUFHQUcsS0FBQSxTQUFBQyxHQUNBVixFQUFBTyxrQkFFQVAsRUFBQUcsVUFBQSxHQUNBSCxFQUFBSSxTQUFBLEdBQ0FKLEVBQUFLLE1BQUEsR0FDQUwsRUFBQU0sTUFBQSxJQUVBLFNBQUFJLEdBQ0FPLE1BQUFLLElBQUEseUNBQUFaLE1BS0FWLEVBQUF1QixxQkFBQSxTQUFBVCxHQUVBQSxFQUFBQyxTQUFBRCxFQUFBLFFBRUFoQixFQUFBcUIsS0FBQSxlQUFBSyxHQUFBVixFQUFBVSxLQUVBZixLQUFBLFNBQUFDLEtBRUEsU0FBQUEsR0FDQU8sTUFBQSxxREFBQUgsRUFBQU0sWUFDQUssUUFBQUgsSUFBQVosWUM1RUEsV0FFQSxZQUdBZixTQUFBQyxPQUFBLGVBQ0E4QixRQUFBLGtCQUFBLFdBRUEsR0FBQTFCLEdBQUFDLElBRUFELEdBQUFFLGlCQ2JBLFdBRUEsWUFFQVAsU0FBQUMsT0FBQSxlQUNBQyxXQUFBLHdCQUFBLGtCQUFBLFFBQUEsU0FBQUUsRUFBQUQsR0FFQSxHQUFBRSxHQUFBQyxJQUVBRCxHQUFBMkIsZ0JBQUEsV0FDQWYsRUFBQUMsS0FBQWQsRUFBQUcsU0FBQSxTQUFBWSxHQUNBQSxFQUFBYyxVQUFBZCxFQUFBLGtCQ1JBLFdBRUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZWQgYnkgTmVpbCBTdHJhaW4gb24gMy8xNC8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdjb250YWN0c0FwcCcsIFsndWkuYm9vdHN0cmFwJ10pO1xyXG5cclxuXHJcbn0oKSk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpvcmRhbiBNYXZyb2dlb3JnZSBvbiAzLzE0LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2NvbnRhY3RzQXBwJylcclxuICAgICAgICAuY29udHJvbGxlcignQ29udGFjdHNDb250cm9sbGVyJywgZnVuY3Rpb24gKCRodHRwLCBDb250YWN0c1NlcnZpY2UpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAvLyBFbXB0eSBsaXN0cyB0byBob2xkIGFsbCBjb250YWN0cy5cclxuICAgICAgICAgICAgdm0uY29udGFjdHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIC8vIFByb3BlcnRpZXMgdG8gc3RvcmUgdmFsdWVzIGZyb20gbmV3IHVzZXIgZm9ybS5cclxuICAgICAgICAgICAgdm0uZmlyc3ROYW1lID0gJyc7XHJcbiAgICAgICAgICAgIHZtLmxhc3ROYW1lID0gJyc7XHJcbiAgICAgICAgICAgIHZtLmVtYWlsID0gJyc7XHJcbiAgICAgICAgICAgIHZtLnBob25lID0gJyc7XHJcblxyXG4gICAgICAgICAgICB2bS5kaXNwbGF5Q29udGFjdHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCdnZXQtY29udGFjdHMnKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmNvbnRhY3RzID0gcmVzLmRhdGE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb250YWN0LmludHJhc2ggc2hvdWxkIGJlIGJvb2xlYW4gdmFsdWUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZWFjaCh2bS5jb250YWN0cywgZnVuY3Rpb24gKGNvbnRhY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhY3QuaW50cmFzaCA9ICEhK2NvbnRhY3QuaW50cmFzaDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb250YWN0c1NlcnZpY2UuY29udGFjdHMucHVzaChjb250YWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdUaGVyZSB3YXMgYW4gZXJyb3IgcmV0cmlldmluZyBjb250YWN0cy4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIERpc3BsYXkgYWxsIGN1cnJlbnQgY29udGFjdHMgaW4gdGhlIGRhdGFiYXNlIHdoZW4gcGFnZSBpcyBsb2FkZWQuXHJcbiAgICAgICAgICAgIHZtLmRpc3BsYXlDb250YWN0cygpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBuZXcgY29udGFjdHMuXHJcbiAgICAgICAgICAgIHZtLmFkZENvbnRhY3QgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdCgnc2F2ZS1jb250YWN0Jywge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmaXJzdF9uYW1lOiB2bS5maXJzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdF9uYW1lOiB2bS5sYXN0TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogdm0uZW1haWwsXHJcbiAgICAgICAgICAgICAgICAgICAgcGhvbmU6IHZtLnBob25lXHJcblxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbiggZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrIChyZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uZGlzcGxheUNvbnRhY3RzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5maXJzdE5hbWUgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0ubGFzdE5hbWUgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uZW1haWwgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0ucGhvbmUgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayAocmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0LmxvZygnVGhlcmUgd2FzIGFuIGVycm9yIHNhdmluZyB0aGUgY29udGFjdC4nLCByZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIHZtLnRvZ2dsZUNvbnRhY3RJblRyYXNoID0gZnVuY3Rpb24oY29udGFjdCl7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGFjdC5pbnRyYXNoID0gIShjb250YWN0LmludHJhc2gpO1xyXG5cclxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJ3NvZnQtZGVsZXRlJywge2lkOiBjb250YWN0LmlkfSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlcykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnVGhlcmUgd2FzIGFuIGVycm9yIHN0b3JpbmcgdGhlIFxcJ2ludHJhc2hcXCcgc3RhdGUgb2YgJyArIGNvbnRhY3QuZmlyc3RfbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxufSgpKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgTmVpbCBTdHJhaW4gb24gMy8xNi8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIC8vIFRPRE86IHByb2JhYmx5IG1vdmUgc29tZSBmdW5jdGlvbnMgZnJvbSBDb250YWN0c0NvbnRyb2xsZXIgdG8gaGVyZS5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdjb250YWN0c0FwcCcpXHJcbiAgICAgICAgLnNlcnZpY2UoJ0NvbnRhY3RzU2VydmljZScsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB2bS5jb250YWN0cyA9IFtdO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbn0oKSk7XHJcbiIsIlxyXG4oZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnY29udGFjdHNBcHAnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdUcmFzaE1vZGFsQ29udHJvbGxlcicsIGZ1bmN0aW9uIChDb250YWN0c1NlcnZpY2UsICRodHRwKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdm0udG9nZ2xlU2VsZWN0QWxsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgXy5lYWNoKENvbnRhY3RzU2VydmljZS5jb250YWN0cywgZnVuY3Rpb24gKGNvbnRhY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWN0LnNlbGVjdGVkID0gIShjb250YWN0LnNlbGVjdGVkKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICB9KTtcclxufSgpKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgTmVpbCBTdHJhaW4gb24gMy8xNC8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuXHJcbn0oKSk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
