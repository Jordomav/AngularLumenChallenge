!function(){"use strict";angular.module("contactsApp",[])}(),function(){"use strict";angular.module("contactsApp").controller("ContactsController",["$http","ContactsService",function(t,n){var e=this;e.contacts=[],e.contactLists=[],e.firstNameInput="",e.lastNameInput="",e.emailInput="",e.phoneInput="",e.belongsToListIds=[],e.displayContacts=function(){t.get("get-contacts").then(function(t){e.contacts=t.data,_.each(e.contacts,function(t){t.intrash=!!+t.intrash}),n.contacts=e.contacts},function(t){alert("There was an error retrieving contacts.")})},e.displayContacts(),e.addContact=function(){t.post("save-contact",{first_name:e.firstNameInput,last_name:e.lastNameInput,email:e.emailInput,phone:e.phoneInput,lists:e.belongsToListIds}).then(function(t){e.displayContacts(),e.firstName="",e.lastName="",e.email="",e.phone="",e.listsForNewContact=[]},function(t){alert("There was an error saving the contact.")})},e.toggleContactInTrash=function(n){n.intrash=!n.intrash,t.post("soft-delete",{id:n.id}).then(function(t){},function(t){alert("There was an error storing the 'intrash' state of "+n.first_name),console.log(t)})},t.get("get-contact-lists").then(function(t){console.log("success"),e.contactLists=t.data},function(){alert("There was an error retrieving Contact Lists")})}])}(),function(){"use strict";angular.module("contactsApp").service("ContactsService",["$http",function(t){var n=this;n.contacts=[],n["delete"]=function(n){t.post("delete-contacts",{}).then(function(t){},function(){alert("There was an error deleting the selected contacts")})}}])}(),function(){"use strict";angular.module("contactsApp").controller("TrashModalController",["ContactsService","$http",function(t,n){var e=this;e.deleteContacts=function(){console.log("delete selected called"),t.contacts.length>0&&(t["delete"](t.contacts),_.each(t.contacts,function(t){t.intrash&&(t.deleted=!0,t.intrash=!1)}))}}])}(),function(){"use strict";angular.module("contactsApp").controller("ContactListsController",["$http",function(t){}])}();
//# sourceMappingURL=data:application/json;base64,
